From e65a083b775b864055641f8b979a3ebb4d4106e9 Mon Sep 17 00:00:00 2001
From: Max Weffers <rcstar6696@gmail.com>
Date: Mon, 20 Apr 2020 16:12:51 +0200
Subject: [PATCH 06/15] qpnp-haptic: Add config for Xiaomi haptic changes

* generates problems on wayne and jasmine
* required on whyred to adjust vibration intensity

Change-Id: If8feb42dcf43c224d3548faba759aef041bd40e6
---
 arch/arm64/configs/jason_defconfig    |  1 +
 arch/arm64/configs/lavender_defconfig |  1 +
 arch/arm64/configs/tulip_defconfig    |  1 +
 drivers/soc/qcom/Kconfig              |  8 +++++
 drivers/soc/qcom/qpnp-haptic.c        | 50 +++++++++++++--------------
 5 files changed, 36 insertions(+), 25 deletions(-)

diff --git a/arch/arm64/configs/jason_defconfig b/arch/arm64/configs/jason_defconfig
index 8a444c3f9550..19a68b868c7f 100644
--- a/arch/arm64/configs/jason_defconfig
+++ b/arch/arm64/configs/jason_defconfig
@@ -617,6 +617,7 @@ CONFIG_ARM_SMMU=y
 CONFIG_QCOM_COMMON_LOG=y
 CONFIG_MSM_SMEM=y
 CONFIG_QPNP_HAPTIC=y
+CONFIG_MI_HAPTICS=y
 CONFIG_QPNP_PBS=y
 CONFIG_MSM_SMD=y
 CONFIG_MSM_GLINK=y
diff --git a/arch/arm64/configs/lavender_defconfig b/arch/arm64/configs/lavender_defconfig
index 57902cd9c45f..1df7d683c042 100644
--- a/arch/arm64/configs/lavender_defconfig
+++ b/arch/arm64/configs/lavender_defconfig
@@ -621,6 +621,7 @@ CONFIG_ARM_SMMU=y
 CONFIG_QCOM_COMMON_LOG=y
 CONFIG_MSM_SMEM=y
 CONFIG_QPNP_HAPTIC=y
+CONFIG_MI_HAPTICS=y
 CONFIG_QPNP_PBS=y
 CONFIG_MSM_SMD=y
 CONFIG_MSM_GLINK=y
diff --git a/arch/arm64/configs/tulip_defconfig b/arch/arm64/configs/tulip_defconfig
index 9b75c930e1b7..cf2981ed4259 100644
--- a/arch/arm64/configs/tulip_defconfig
+++ b/arch/arm64/configs/tulip_defconfig
@@ -616,6 +616,7 @@ CONFIG_ARM_SMMU=y
 CONFIG_QCOM_COMMON_LOG=y
 CONFIG_MSM_SMEM=y
 CONFIG_QPNP_HAPTIC=y
+CONFIG_MI_HAPTICS=y
 CONFIG_QPNP_PBS=y
 CONFIG_MSM_SMD=y
 CONFIG_MSM_GLINK=y
diff --git a/drivers/soc/qcom/Kconfig b/drivers/soc/qcom/Kconfig
index 81db4fe93dbc..6e1a621f34a4 100644
--- a/drivers/soc/qcom/Kconfig
+++ b/drivers/soc/qcom/Kconfig
@@ -55,6 +55,14 @@ config QPNP_HAPTIC
 	  module provides haptic feedback for user actions such as a long press
 	  on the touch screen.  It uses the Android timed-output framework.
 
+config MI_HAPTICS
+	tristate "Haptic support for Xiaomi Haptics"
+	depends on QPNP_HAPTIC
+	default n
+	help
+	  This option enables device driver support for the haptic peripheral
+	  found on Xiaomi MiCode Releases.
+
 config QPNP_PBS
 	tristate "PBS trigger support for QPNP PMIC"
 	depends on SPMI
diff --git a/drivers/soc/qcom/qpnp-haptic.c b/drivers/soc/qcom/qpnp-haptic.c
index 8d0d03cc5cdf..8946012a71ca 100644
--- a/drivers/soc/qcom/qpnp-haptic.c
+++ b/drivers/soc/qcom/qpnp-haptic.c
@@ -88,7 +88,7 @@
 #define QPNP_HAP_WF_SOURCE_SHIFT	4
 #define QPNP_HAP_VMAX_OVD_BIT		BIT(6)
 #define QPNP_HAP_VMAX_MASK		GENMASK(5, 1)
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 #define QPNP_HAP_VMAX_OVERDRIVE_MASK		GENMASK(6, 6)
 #endif
 #define QPNP_HAP_VMAX_SHIFT		1
@@ -180,7 +180,7 @@ u32 adjusted_lra_play_rate_code[ADJUSTED_LRA_PLAY_RATE_CODE_ARRSIZE];
 
 /* haptic debug register set */
 static u8 qpnp_hap_dbg_regs[] = {
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 	0x0a, 0x0b, 0x0c, 0x46, 0x48, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x51, 0x52, 0x53,
 #else
 	0x0a, 0x0b, 0x0c, 0x46, 0x48, 0x4c, 0x4d, 0x4e, 0x4f, 0x51, 0x52, 0x53,
@@ -395,7 +395,7 @@ struct qpnp_hap {
 	u8				act_type;
 	u8				wave_shape;
 	u8				wave_samp[QPNP_HAP_WAV_SAMP_LEN];
-#ifdef CONFIG_MACH_LONGCHEER
+#if defined(CONFIG_MACH_LONGCHEER) && defined(CONFIG_MI_HAPTICS)
 	u8				wave_samp_two[QPNP_HAP_WAV_SAMP_LEN];
 	u8				wave_samp_three[QPNP_HAP_WAV_SAMP_LEN];
 #endif
@@ -420,7 +420,7 @@ struct qpnp_hap {
 	bool				override_auto_mode_config;
 	bool				play_irq_en;
 	int				td_time_ms;
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 	u32				overdrive;
 	u32				vmax_overbrake_mv;
 	u32				vmax_overdrive_mv;
@@ -890,7 +890,7 @@ static int qpnp_hap_lra_auto_res_config(struct qpnp_hap *hap,
 	return rc;
 }
 
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 #define QPNP_HAP_WAV_SHAPE_REG(b)	(b + 0x4D)
 static int qpnp_hap_waveshape_config(struct qpnp_hap *hap, u8 waveshape)
 {
@@ -1124,7 +1124,7 @@ static int qpnp_hap_parse_buffer_dt(struct qpnp_hap *hap)
 		memcpy(hap->wave_samp, prop->value, QPNP_HAP_WAV_SAMP_LEN);
 	}
 
-#ifdef CONFIG_MACH_LONGCHEER
+#if defined(CONFIG_MACH_LONGCHEER) && defined(CONFIG_MI_HAPTICS)
 	prop = of_find_property(pdev->dev.of_node,
 		"qcom,wave-samples-two", &temp);
 	if (!prop || temp != QPNP_HAP_WAV_SAMP_LEN) {
@@ -2020,7 +2020,7 @@ static int qpnp_hap_auto_res_enable(struct qpnp_hap *hap, int enable)
 	else
 		auto_res_mode_qwd = (hap->ares_cfg.auto_res_mode ==
 							QPNP_HAP_AUTO_RES_QWD);
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 	hap->auto_res_mode_qwd = auto_res_mode_qwd;
 #endif
 
@@ -2033,7 +2033,7 @@ static int qpnp_hap_auto_res_enable(struct qpnp_hap *hap, int enable)
 		return 0;
 	}
 
-#ifndef CONFIG_MACH_MI
+#ifndef CONFIG_MI_HAPTICS
 	if (!hap->correct_lra_drive_freq && !auto_res_mode_qwd) {
 		pr_debug("correct_lra_drive_freq: %d auto_res_mode_qwd: %d\n",
 			hap->correct_lra_drive_freq, auto_res_mode_qwd);
@@ -2052,14 +2052,14 @@ static int qpnp_hap_auto_res_enable(struct qpnp_hap *hap, int enable)
 	 * 'time_required_to_generate_back_emf_us' is completed.
 	 */
 	if (enable)
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 	{
 		if (hap->play_time_ms < 20 && !hap->force_back_emf_delay)
 			return 0;
 
 #endif
 		usleep_range(back_emf_delay_us, back_emf_delay_us + 1);
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 		/*
 		 * overdrive  in the first 20 ms.
 		 * */
@@ -2159,7 +2159,7 @@ static void update_lra_frequency(struct qpnp_hap *hap)
 	}
 }
 
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 static void update_lra_frequency_conservatism(struct qpnp_hap *hap)
 {
 	u8 lra_auto_res[2], val;
@@ -2255,7 +2255,7 @@ static bool is_sw_lra_auto_resonance_control(struct qpnp_hap *hap)
 	return true;
 }
 
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 /*change brake pattern.*/
 static void change_brake_pattern(struct qpnp_hap *hap)
 {
@@ -2308,7 +2308,7 @@ static int qpnp_hap_set(struct qpnp_hap *hap, bool on)
 			if (rc < 0)
 				return rc;
 
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 			if (hap->vmax_overdrive_mv)
 				qpnp_hap_vmax_config(hap, hap->vmax_overdrive_mv, false);
 #endif
@@ -2337,7 +2337,7 @@ static int qpnp_hap_set(struct qpnp_hap *hap, bool on)
 				mutex_unlock(&hap->lock);
 			}
 		} else {
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 			if (hap->vmax_overbrake_mv && (hap->play_time_ms >= 20 || hap->force_back_emf_delay)) {
 				if (hap->square_drive)
 					qpnp_hap_waveshape_config(hap, QPNP_HAP_WAV_SQUARE);
@@ -2359,7 +2359,7 @@ static int qpnp_hap_set(struct qpnp_hap *hap, bool on)
 				(hap->status_flags & AUTO_RESONANCE_ENABLED))
 				update_lra_frequency(hap);
 
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 			/*
 			 *update the fixed frequency when auto_res is succeed
 			 *Motor will vibrate 20ms before auto_res,and another 4 period to
@@ -2513,7 +2513,7 @@ static void qpnp_timed_enable_worker(struct work_struct *work)
 	struct qpnp_hap *hap = container_of(work, struct qpnp_hap,
 					 td_work);
 	bool state;
-#ifdef CONFIG_MACH_LONGCHEER
+#if defined(CONFIG_MACH_LONGCHEER) && defined(CONFIG_MI_HAPTICS)
 	int vmax_mv;
 #else
 	ktime_t rem;
@@ -2532,7 +2532,7 @@ static void qpnp_timed_enable_worker(struct work_struct *work)
 
 	mutex_lock(&hap->lock);
 
-#ifdef CONFIG_MACH_LONGCHEER
+#if defined(CONFIG_MACH_LONGCHEER) && defined(CONFIG_MI_HAPTICS)
 	if (time_ms == 0) {
 		/* disable haptics */
 		hrtimer_cancel(&hap->hap_timer);
@@ -2558,7 +2558,7 @@ static void qpnp_timed_enable_worker(struct work_struct *work)
 		return;
 	}
 
-#ifdef CONFIG_MACH_LONGCHEER
+#if defined(CONFIG_MACH_LONGCHEER) && defined(CONFIG_MI_HAPTICS)
 	if (time_ms < 10)
 		time_ms = 10;
 
@@ -2623,7 +2623,7 @@ static void qpnp_timed_enable_worker(struct work_struct *work)
 		time_ms = (time_ms > hap->timeout_ms ?
 				 hap->timeout_ms : time_ms);
 		hap->play_time_ms = time_ms;
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 		/*PM660 have this issue.*/
 		qpnp_hap_play(hap, 0);
 		qpnp_hap_mod_enable(hap, 0);
@@ -2835,7 +2835,7 @@ static int qpnp_hap_config(struct qpnp_hap *hap)
 		return rc;
 
 	/* Configure the VMAX register */
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 	if (hap->vmax_overbrake_mv)
 		rc = qpnp_hap_vmax_config(hap, hap->vmax_overbrake_mv, false);
 	else
@@ -2877,7 +2877,7 @@ static int qpnp_hap_config(struct qpnp_hap *hap)
 
 	hap->init_drive_period_code =
 			 hap->wave_play_rate_us / QPNP_HAP_RATE_CFG_STEP_US;
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 	hap->wave_play_rate_frequency = 1000000 / hap->wave_play_rate_us;
 #endif
 
@@ -3176,7 +3176,7 @@ static int qpnp_hap_parse_dt(struct qpnp_hap *hap)
 			hap->drive_period_code_min_limit_percent_variation =
 								(u8) temp;
 
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 		if (hap->pmic_subtype == PM660_SUBTYPE ||
 				hap->ares_cfg.auto_res_mode == QPNP_HAP_AUTO_RES_QWD) {
 #else
@@ -3193,7 +3193,7 @@ static int qpnp_hap_parse_dt(struct qpnp_hap *hap)
 		} else {
 			hap->time_required_to_generate_back_emf_us = 0;
 		}
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 		hap->force_back_emf_delay = !(of_property_read_bool(pdev->dev.of_node,
 						   "qcom,disable_force_back_emf_delay"));
 		hap->square_drive = (of_property_read_bool(pdev->dev.of_node,
@@ -3256,7 +3256,7 @@ static int qpnp_hap_parse_dt(struct qpnp_hap *hap)
 
 	hap->vtg_default = hap->vmax_mv;
 
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 	hap->overdrive = of_property_read_bool(pdev->dev.of_node,
 			"qcom,ovd_2x");
 
@@ -3361,7 +3361,7 @@ static int qpnp_hap_parse_dt(struct qpnp_hap *hap)
 			memcpy(hap->brake_pat, prop->value,
 					QPNP_HAP_BRAKE_PAT_LEN);
 		}
-#ifdef CONFIG_MACH_MI
+#ifdef CONFIG_MI_HAPTICS
 		/*
 		 * brake_pat_index = -1 to make sure brake_pat will be changed in the first time.
 		 * brake_pat_max = 0 to make sure disable changing brake_pattern.
-- 
2.25.1

