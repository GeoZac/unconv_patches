From d80cea4d3294b143bc55de21ebfbf7ef90948f6f Mon Sep 17 00:00:00 2001
From: Steve Kondik <steve@cyngn.com>
Date: Wed, 20 Jul 2016 12:48:01 -0700
Subject: [PATCH] qpnp-haptic: Dejank the haptics

 * Add mutexes and call hap_set without the workqueue for direct mode

Change-Id: I98f5b8ddea572def2706ad2cfa18f9dd460757ed
---
 drivers/soc/qcom/qpnp-haptic.c | 35 +++++++++++++++++++++++++++-------
 1 file changed, 28 insertions(+), 7 deletions(-)

diff --git a/drivers/soc/qcom/qpnp-haptic.c b/drivers/soc/qcom/qpnp-haptic.c
index 8946012a71ca..d954f0850adc 100644
--- a/drivers/soc/qcom/qpnp-haptic.c
+++ b/drivers/soc/qcom/qpnp-haptic.c
@@ -362,6 +362,7 @@ struct qpnp_hap {
 	struct qpnp_hap_lra_ares_cfg	ares_cfg;
 	struct mutex			lock;
 	struct mutex			wf_lock;
+	struct mutex			set_lock;
 	spinlock_t			bus_lock;
 	spinlock_t			td_lock;
 	struct work_struct		td_work;
@@ -2293,6 +2294,8 @@ static int qpnp_hap_set(struct qpnp_hap *hap, bool on)
 	int rc = 0;
 	unsigned long timeout_ns = POLL_TIME_AUTO_RES_ERR_NS;
 
+	mutex_lock(&hap->set_lock);
+
 	if (hap->play_mode == QPNP_HAP_PWM) {
 		if (on) {
 			rc = pwm_enable(hap->pwm_info.pwm_dev);
@@ -2314,16 +2317,22 @@ static int qpnp_hap_set(struct qpnp_hap *hap, bool on)
 #endif
 
 			rc = qpnp_hap_mod_enable(hap, on);
-			if (rc < 0)
+			if (rc < 0) {
+				mutex_unlock(&hap->set_lock);
 				return rc;
+			}
 
 			rc = qpnp_hap_play(hap, on);
-			if (rc < 0)
+			if (rc < 0) {
+				mutex_unlock(&hap->set_lock);
 				return rc;
+			}
 
 			rc = qpnp_hap_auto_res_enable(hap, 1);
-			if (rc < 0)
+			if (rc < 0) {
+				mutex_unlock(&hap->set_lock);
 				return rc;
+			}
 
 			if (is_sw_lra_auto_resonance_control(hap)) {
 				/*
@@ -2352,8 +2361,10 @@ static int qpnp_hap_set(struct qpnp_hap *hap, bool on)
 			}
 #endif
 			rc = qpnp_hap_play(hap, on);
-			if (rc < 0)
+			if (rc < 0) {
+				mutex_unlock(&hap->set_lock);
 				return rc;
+			}
 
 			if (is_sw_lra_auto_resonance_control(hap) &&
 				(hap->status_flags & AUTO_RESONANCE_ENABLED))
@@ -2371,14 +2382,17 @@ static int qpnp_hap_set(struct qpnp_hap *hap, bool on)
 #endif
 
 			rc = qpnp_hap_mod_enable(hap, on);
-			if (rc < 0)
+			if (rc < 0) {
+				mutex_unlock(&hap->set_lock);
 				return rc;
+			}
 
 			if (is_sw_lra_auto_resonance_control(hap))
 				hrtimer_cancel(&hap->auto_res_err_poll_timer);
 		}
 	}
 
+	mutex_unlock(&hap->set_lock);
 	return rc;
 }
 
@@ -2530,6 +2544,8 @@ static void qpnp_timed_enable_worker(struct work_struct *work)
 	if (time_ms < 0)
 		return;
 
+	flush_work(&hap->work);
+
 	mutex_lock(&hap->lock);
 
 #if defined(CONFIG_MACH_LONGCHEER) && defined(CONFIG_MI_HAPTICS)
@@ -2636,7 +2652,10 @@ static void qpnp_timed_enable_worker(struct work_struct *work)
 #endif
 
 	mutex_unlock(&hap->lock);
-	schedule_work(&hap->work);
+	if (hap->play_mode == QPNP_HAP_DIRECT)
+		qpnp_hap_set(hap, hap->state);
+	else
+		schedule_work(&hap->work);
 }
 
 /* enable interface from timed output class */
@@ -2742,7 +2761,8 @@ static void qpnp_hap_worker(struct work_struct *work)
 		qpnp_hap_set(hap, hap->state);
 	}
 
-	if (hap->vcc_pon && !hap->state && hap->vcc_pon_enabled) {
+	if (hap->vcc_pon && !hap->state && hap->vcc_pon_enabled
+		&& !hap->state) {
 		rc = regulator_disable(hap->vcc_pon);
 		if (rc)
 			pr_err("could not disable vcc_pon regulator rc=%d\n",
@@ -3489,6 +3509,7 @@ static int qpnp_haptic_probe(struct platform_device *pdev)
 
 	mutex_init(&hap->lock);
 	mutex_init(&hap->wf_lock);
+        mutex_init(&hap->set_lock);
 	spin_lock_init(&hap->td_lock);
 	INIT_WORK(&hap->work, qpnp_hap_worker);
 	INIT_DELAYED_WORK(&hap->sc_work, qpnp_handle_sc_irq);
